cmake_minimum_required(VERSION 3.2)

project(occt-webgl-sample)

set(APP_VERSION_MAJOR 1)
set(APP_VERSION_MINOR 0)
set(APP_TARGET occt-webgl-sample)
set(NUM_BUILD_THREADS 12)

set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -s USE_FREETYPE=1")
set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -s USE_FREETYPE=1")
set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -s USE_FREETYPE=1")

include(ExternalProject)

# Step 1: Download emsdk (no shell commands directly)
ExternalProject_Add(emsdk_download
    GIT_REPOSITORY https://github.com/emscripten-core/emsdk.git
    GIT_TAG        main
    CONFIGURE_COMMAND ""
    BUILD_COMMAND ""
    INSTALL_COMMAND ""
)

ExternalProject_Get_Property(emsdk_download SOURCE_DIR)
set(EMSDK_SCRIPT "${SOURCE_DIR}/emsdk")
set(CMAKE_TOOLCHAIN_FILE "${SOURCE_DIR}/upstream/emscripten/cmake/Modules/Platform/Emscripten.cmake")
message(STATUS "CMAKE_TOOLCHAIN_FILE = ${CMAKE_TOOLCHAIN_FILE}")

# Step 2: Install emsdk
ExternalProject_Add(emsdk_install
    DOWNLOAD_COMMAND ""
    SOURCE_DIR ${SOURCE_DIR}
    CONFIGURE_COMMAND ""
    BUILD_COMMAND ${CMAKE_COMMAND} -E echo "Installing emsdk..."
    INSTALL_COMMAND ${EMSDK_SCRIPT} install latest
    BUILD_IN_SOURCE 1
    LOG_INSTALL ON
)

# Step 3: Activate emsdk
ExternalProject_Add(emsdk_activate
    DOWNLOAD_COMMAND ""
    SOURCE_DIR ${SOURCE_DIR}
    CONFIGURE_COMMAND ""
    BUILD_COMMAND ${CMAKE_COMMAND} -E echo "Activating emsdk..."
    INSTALL_COMMAND ${EMSDK_SCRIPT} activate latest
    BUILD_IN_SOURCE 1
    LOG_INSTALL ON
)

add_dependencies(emsdk_install emsdk_download)
add_dependencies(emsdk_activate emsdk_install)

# Ensure emsdk is ready before any other builds
add_custom_target(activate_emsdk ALL
    DEPENDS emsdk_activate
    COMMAND ${CMAKE_COMMAND} -E echo "emsdk setup complete."
)

# Step 5: Build OCCT with FreeType and Emscripten
ExternalProject_Add(
    OCCT
    GIT_REPOSITORY https://github.com/Open-Cascade-SAS/OCCT.git
    GIT_TAG V7_8_1
    CMAKE_ARGS
        -DCMAKE_BUILD_TYPE=Release  
        -DCMAKE_INSTALL_PREFIX=/opt/emsdk-occt-git
    CMAKE_CACHE_ARGS
        -DCMAKE_TOOLCHAIN_FILE=${CMAKE_TOOLCHAIN_FILE}
        -DCMAKE_BUILD_TYPE=Release  
        -DCMAKE_INSTALL_PREFIX=/opt/emsdk-occt-git
        -DBUILD_LIBRARY_TYPE=Static 
        -DBUILD_MODULE_ApplicationFramework=ON 
        -DBUILD_MODULE_DETools=OFF 
        -DBUILD_MODULE_DataExchange=ON 
        -DBUILD_MODULE_Draw=OFF 
        -DBUILD_MODULE_FoundationClasses=ON 
        -DBUILD_MODULE_ModelingAlgorithms=ON 
        -DBUILD_MODULE_ModelingData=ON 
        -DBUILD_MODULE_Visualization=ON 
        -DBUILD_DOC_Overview=OFF 
        -DBUILD_SAMPLES_QT=OFF 
        # -DCMAKE_CXX_FLAGS="${CMAKE_CXX_FLAGS} -s USE_FREETYPE=1" 
        # -DCMAKE_C_FLAGS="${CMAKE_C_FLAGS} -s USE_FREETYPE=1" 
        # -DCMAKE_EXE_LINKER_FLAGS="${CMAKE_EXE_LINKER_FLAGS} -s USE_FREETYPE=1" 
   
    BUILD_IN_SOURCE 1
    UPDATE_DISCONNECTED 1
    BUILD_COMMAND ${CMAKE_COMMAND} --build . -- -j${NUM_BUILD_THREADS}
)
add_dependencies(OCCT emsdk_activate)

# Step 6: Define the main project target
add_executable(${APP_TARGET} src/WasmOcctView.cpp src/main.cpp)

# Ensure the main project builds after all dependencies
add_dependencies(${APP_TARGET} OCCT emsdk_activate)

# Linker flags setup
set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -s WASM=1")
set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -s MAX_WEBGL_VERSION=2")
set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -s MODULARIZE=1")
set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -s EXPORT_NAME='createOccViewerModule'")
set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -s ALLOW_MEMORY_GROWTH=1")
set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} --extern-post-js ${CMAKE_CURRENT_SOURCE_DIR}/occt-webgl-viewer.js")

# Link the libraries
target_link_libraries(${APP_TARGET}
    ${OpenCASCADE_LIBS}
    freetype
)

# Installation setup
set(CMAKE_INSTALL_PREFIX "/opt/occt-webgl")
install(TARGETS ${APP_TARGET} RUNTIME DESTINATION "${CMAKE_INSTALL_PREFIX}" LIBRARY DESTINATION "${CMAKE_INSTALL_PREFIX}")
install(FILES ${CMAKE_CURRENT_BINARY_DIR}/${APP_TARGET}.wasm DESTINATION ${CMAKE_INSTALL_PREFIX})
install(FILES occt-webgl-sample.html DESTINATION ${CMAKE_INSTALL_PREFIX})
install(FILES ${OpenCASCADE_RESOURCE_DIR}/DrawResources/OCC_logo.png  DESTINATION ${CMAKE_INSTALL_PREFIX})
install(FILES ${OpenCASCADE_RESOURCE_DIR}/DrawResources/lamp.ico      DESTINATION ${CMAKE_INSTALL_PREFIX})
if (CMAKE_CXX_FLAGS MATCHES "-pthread")
  install(FILES ${CMAKE_CURRENT_BINARY_DIR}/${APP_TARGET}.worker.js DESTINATION ${CMAKE_INSTALL_PREFIX})
endif()

